services:
  npcg-app:
    build:
      context: .
      target: ${GO_ENV}
    container_name: ${APP_CONTAINER_NAME}
    env_file:
      - ./.env
    environment:
      PORT: 5432
      LOG_LEVEL: ${LOG_LEVEL}
      POSTGRES_HOST: npcg-pg # Service name of the Postgres container
      POSTGRES_PORT: 5432 # Internal port that Postgres is listening on
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      GOFLAGS: -buildvcs=false
    depends_on:
      npcg-migrate:
        condition: service_completed_successfully
    volumes:
      - .:/app
    networks:
      - npcg-network

  npcg-pg:
    image: postgres:10.5
    restart: always
    container_name: ${POSTGRES_CONTAINER_NAME}
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    logging:
      options:
        max-size: 10m
        max-file: "3"
    healthcheck:
      test: [ CMD-SHELL, "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432" # External port 5454 mapped to internal 5432
    volumes:
      - ./pg-data:/var/lib/postgresql/data
      - ${RAWDATA_PATH}:/rawdata
    networks:
      - npcg-network

  npcg-migrate:
    image: migrate/migrate
    container_name: ${MIGRATION_CONTAINER_NAME}
    depends_on:
      npcg-pg:
        condition: service_healthy
    networks:
      - npcg-network
    volumes:
      - ${MIGRATION_PATH}:/migrations
      - ${RAWDATA_PATH}:/rawdata
    command: [ "-path", "/migrations/", "-database", "${DB_CONNECTION_STRING}", "up" ]

volumes:
  pg-data:


networks:
  npcg-network:
